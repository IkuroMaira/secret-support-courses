<?php
/**
 * ======================================================
 * üìö COURS: OP√âRATIONS CRUD EN SQL AVEC PHP
 * ======================================================
 *
 * Ce fichier contient des exemples et des explications sur:
 * - Les op√©rations CRUD (Create, Read, Update, Delete)
 * - Les requ√™tes SQL fondamentales
 * - L'utilisation de PDO pour se connecter √† une base de donn√©es
 * - Les bonnes pratiques de nommage et de structuration
 */

// ======================================================
// üîå CONNEXION √Ä LA BASE DE DONN√âES
// ======================================================

/**
 * Param√®tres de connexion √† la base de donn√©es
 * √Ä adapter selon votre environnement
 */
$host = "localhost";
$dbname = "ma_base_de_donnees"; // Donner le nom qu'on le veut
$username = "root";
$password = "root"; // Valeur vide pour les Windows

try {
    // Connexion √† la base de donn√©es avec PDO
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

    // Configuration des options PDO
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Lance des exceptions en cas d'erreur
    $pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC); // Retourne les r√©sultats sous forme de tableaux associatifs

    // echo "Connexion r√©ussie √† la base de donn√©es"; // D√©commentez pour tester
} catch(PDOException $e) {
    die("Erreur de connexion : " . $e->getMessage());
}

// ======================================================
// üåê COMPRENDRE LE CRUD
// ======================================================

/**
 * CRUD repr√©sente les 4 op√©rations fondamentales pour manipuler des donn√©es:
 *
 * - Create (Cr√©er) ‚ûï
 * - Read (Lire) üëÅÔ∏è
 * - Update (Mettre √† jour) üîÑ
 * - Delete (Supprimer) ‚ùå
 */

// On va cr√©er notre premi√®re table utilisateurs dans PHPMyAdmin
// De quoi on a besoin dans notre table utilisateurs ?
/*
- id num√©rique qui s'autoincr√©mente et qui est notre primary key
- nom de l'utilisateur texte non null
- email texte unique non null
- mot de passe texte non null
- date de l'inscription
*/

// Structure d'une table SQL typique (√† ex√©cuter dans PHPMyAdmin)
/*
CREATE TABLE utilisateurs (
    // TODO: √† compl√©ter
);
*/

// ======================================================
// ‚ûï CREATE (INSERT) - Ajouter des donn√©es
// ======================================================

// Ici on va determiner le SQL pour ins√©rer notre premier utilisateur
/**
 * En SQL √† compl√©ter:
 *
 * INSERT INTO ...
 */

// En PHP avec PDO:
function ajouterUtilisateur($pdo, $nom, $email, $mot_de_passe) {
    // Hachage du mot de passe (toujours utiliser password_hash en production) pour ceux qui veulent hacher le mot de passe
//     $mot_de_passe_hash = password_hash($mot_de_passe, PASSWORD_DEFAULT);

    $sql = "INSERT INTO ...";

    try {
        $stmt = $pdo->prepare($sql);
        $stmt->execute([$nom, $email, $mot_de_passe_hash]);
        return $pdo->lastInsertId(); // Retourne l'ID de l'utilisateur ins√©r√©
    } catch(PDOException $e) {
        echo "Erreur lors de l'ajout : " . $e->getMessage();
        return false;
    }
}

// Exemple d'utilisation:
// $nouvel_id = ajouterUtilisateur($pdo, 'Jean Martin', 'jean@exemple.com', 'motdepasse123');
// echo "Nouvel utilisateur ajout√© avec l'ID: " . $nouvel_id;

// ======================================================
// üëÅÔ∏è READ (SELECT) - Lire des donn√©es
// ======================================================

// Ins√©rer dans PHPMyAdmin ces donn√©es pour pratiquer
/*
-- Insertion des donn√©es de test pour les utilisateurs
INSERT INTO utilisateurs (nom, email, mot_de_passe, date_inscription) VALUES
    ('Dupont Marie', 'marie.dupont@email.com', '0612dfv345678', '2023-01-15 10:30:00'),
    ('Martin Thomas', 'thomas.martin@email.com', '072frge3456789', '2023-02-20 14:45:00'),
    ('Dubois Sophie', 'sophie.dubois@email.com', '0634fzefzef567890', '2023-03-10 09:15:00'),
    ('Bernard Lucas', 'lucas.bernard@email.com', '0745dvfbb678901', '2023-04-05 16:20:00'),
    ('Petit Emma', 'emma.petit@email.com', '06567zfzgr89012', '2023-05-12 11:00:00'),
    ('Robert Hugo', 'hugo.robert@email.com', '07678901efzge23', '2023-06-18 13:30:00'),
    ('Richard Chlo√©', 'chloe.richard@email.com', '06rgregeg78901234', '2023-07-23 15:45:00'),
    ('Moreau Nathan', 'nathan.moreau@email.com', '078aefzreg9012345', '2023-08-30 10:10:00'),
    ('Simon L√©a', 'lea.simon@email.com', '069012kilug3456', '2023-09-14 12:25:00'),
    ('Laurent Gabriel', 'gabriel.laurent@email.com', '0701234qvqzgrg567', '2023-10-01 14:40:00'),
    ('Bussac Gwena√´lle', 'bussac.gwenaelle@email.com', '0701234qvqzgrg567', '2023-10-01 15:40:00');
*/

// Ici on va d√©terminer le SQL pour afficher les donn√©es de la table utilisateurs
/**
 * En SQL:
 *
 * -- Lire tous les utilisateurs :
 *
 * -- Lire un utilisateur sp√©cifique
 *
 * -- Lire avec filtrage : o√π la date d'inscription est '2023-02-28' et ranger par ordre alphab√©tique
 */

// Fonction pour r√©cup√©rer tous les utilisateurs
function obtenirTousLesUtilisateurs($pdo) {
    $sql = "SELECT ...";

    try {
        $stmt = $pdo->query($sql);
        return $stmt->fetchAll();
    } catch(PDOException $e) {
        echo "Erreur lors de la r√©cup√©ration : " . $e->getMessage();
        return [];
    }
}

// Fonction pour r√©cup√©rer un utilisateur par son ID
function obtenirUtilisateurParId($pdo, $id) {
    $sql = "SELECT ...";

    try {
        $stmt = $pdo->prepare($sql);
        $stmt->execute([$id]);
        return $stmt->fetch(); // Retourne false si aucun r√©sultat
    } catch(PDOException $e) {
        echo "Erreur lors de la r√©cup√©ration : " . $e->getMessage();
        return false;
    }
}

// Fonction pour rechercher des utilisateurs avec filtrage
function rechercherUtilisateurs($pdo, $date_min, $ordre = 'ASC') {
    $sql = "SELECT ...

    try {
        $stmt = $pdo->prepare($sql);
        $stmt->execute([$date_min]);
        return $stmt->fetchAll();
    } catch(PDOException $e) {
        echo "Erreur lors de la recherche : " . $e->getMessage();
        return [];
    }
}

// Exemples d'utilisation:
// $tous_les_utilisateurs = obtenirTousLesUtilisateurs($pdo);
// $utilisateur = obtenirUtilisateurParId($pdo, 1);
// $utilisateurs_recents = rechercherUtilisateurs($pdo, '2023-01-01');

// ======================================================
// üîÑ UPDATE (UPDATE) - Mettre √† jour des donn√©es
// ======================================================

// Ici on d√©terminer le SQL pour
/**
 * En SQL:
 *
 * -- Mettre √† jour le champ de l'utilisateur avec l'id = 1
 * UPDATE ...
 *
 * -- Mettre √† jour plusieurs champs (nom et email)
 * UPDATE ...
 * SET ...
 */

// Fonction pour mettre √† jour l'email d'un utilisateur
function mettreAJourEmail($pdo, $id, $nouvel_email) {
    $sql = "UPDATE ...";

    try {
        $stmt = $pdo->prepare($sql);
        $stmt->execute([$nouvel_email, $id]);
        return $stmt->rowCount(); // Nombre de lignes affect√©es
    } catch(PDOException $e) {
        echo "Erreur lors de la mise √† jour : " . $e->getMessage();
        return false;
    }
}

// Fonction pour mettre √† jour plusieurs champs d'un utilisateur
function mettreAJourUtilisateur($pdo, $id, $nom, $email) {
    $sql = "UPDATE ...";

    try {
        $stmt = $pdo->prepare($sql);
        $stmt->execute([$nom, $email, $id]);
        return $stmt->rowCount(); // Nombre de lignes affect√©es
    } catch(PDOException $e) {
        echo "Erreur lors de la mise √† jour : " . $e->getMessage();
        return false;
    }
}

// Exemples d'utilisation:
// $resultat = mettreAJourEmail($pdo, 1, 'nouveau.email@exemple.com');
// $resultat = mettreAJourUtilisateur($pdo, 1, 'Marie Martin', 'marie.martin@exemple.com');

// ======================================================
// ‚ùå DELETE (DELETE) - Supprimer des donn√©es
// ======================================================

// Ici on va d√©terminer le SQL pour
/**
 * En SQL:
 *
 * -- Supprimer un utilisateur sp√©cifique
 * DELETE ...
 *
 * -- Supprimer selon un crit√®re selon la date d'inscription < '2022-01-01'
 * DELETE ...
 * WHERE ...;
 */

// Fonction pour supprimer un utilisateur par son ID
function supprimerUtilisateur($pdo, $id) {
    $sql = "DELETE ...";

    try {
        $stmt = $pdo->prepare($sql);
        $stmt->execute([$id]);
        return $stmt->rowCount(); // Nombre de lignes affect√©es
    } catch(PDOException $e) {
        echo "Erreur lors de la suppression : " . $e->getMessage();
        return false;
    }
}

// Fonction pour supprimer des utilisateurs selon une date
function supprimerUtilisateursAnciens($pdo, $date_limite) {
    $sql = "DELETE ...";

    try {
        $stmt = $pdo->prepare($sql);
        $stmt->execute([$date_limite]);
        return $stmt->rowCount(); // Nombre de lignes affect√©es
    } catch(PDOException $e) {
        echo "Erreur lors de la suppression : " . $e->getMessage();
        return false;
    }
}

// Exemples d'utilisation:
// $resultat = supprimerUtilisateur($pdo, 1);
// $nombre_supprimes = supprimerUtilisateursAnciens($pdo, '2022-01-01');

// ======================================================
// üîç COMPOSANTS AVANC√âS D'UNE REQU√äTE SQL
// ======================================================

// 1. SELECT et FROM - Les fondamentaux üìä
/**
 * SELECT id, nom, email FROM utilisateurs;
 */

// 2. WHERE - Filtrer les r√©sultats üîé
/**
 * SELECT ... LIKE '%@example.com';
 */

// 3. Jointures (JOIN) - Relier les tables üîó

// INNER JOIN - Ne garde que les correspondances
function obtenirPublicationsUtilisateurs($pdo) {
    $sql = "SELECT ...
            FROM ...
            INNER JOIN ... ON ...";

    try {
        $stmt = $pdo->query($sql);
        return $stmt->fetchAll();
    } catch(PDOException $e) {
        echo "Erreur lors de la requ√™te : " . $e->getMessage();
        return [];
    }
}

// LEFT JOIN - Garde toutes les lignes de la premi√®re table
function obtenirUtilisateursAvecPublications($pdo) {
    $sql = "SELECT ...
            FROM ...
            LEFT JOIN ... ON ...";

    try {
        $stmt = $pdo->query($sql);
        return $stmt->fetchAll();
    } catch(PDOException $e) {
        echo "Erreur lors de la requ√™te : " . $e->getMessage();
        return [];
    }
}

// 4. GROUP BY et fonctions d'agr√©gation üìä
function compterPublicationsParUtilisateur($pdo) {
    $sql = "SELECT utilisateur_id, COUNT(*) AS nombre_publications
            FROM ...
            GROUP BY ...";

    try {
        $stmt = $pdo->query($sql);
        return $stmt->fetchAll();
    } catch(PDOException $e) {
        echo "Erreur lors du comptage : " . $e->getMessage();
        return [];
    }
}

// 5. HAVING - Filtrer apr√®s regroupement üîç
function obtenirPublicationsPopulaires($pdo, $min_likes = 3) {
    $sql = "SELECT publication_id, COUNT(*) AS nombre_likes
            FROM ...
            GROUP BY ...
            HAVING COUNT(*) >= ?";

    try {
        $stmt = $pdo->prepare($sql);
        $stmt->execute([$min_likes]);
        return $stmt->fetchAll();
    } catch(PDOException $e) {
        echo "Erreur lors de la requ√™te : " . $e->getMessage();
        return [];
    }
}

// ======================================================
// üöÄ EXERCICES PRATIQUES
// ======================================================

/**
 * Mettre en place une base de donn√©es pour l'exercice:
 *
 -- Cr√©ation de la table des cat√©gories
 CREATE TABLE categories (
     id INT AUTO_INCREMENT PRIMARY KEY,
     nom VARCHAR(50) NOT NULL,
     description TEXT
 );

 -- Cr√©ation de la table des utilisateurs
 CREATE TABLE utilisateurs (
   id INT AUTO_INCREMENT PRIMARY KEY,
   nom VARCHAR(50) NOT NULL,
   prenom VARCHAR(50) NOT NULL,
   email VARCHAR(100) UNIQUE NOT NULL,
   telephone VARCHAR(15),
   date_inscription DATETIME DEFAULT CURRENT_TIMESTAMP,
   nombre_emprunts INT DEFAULT 0
 );

 -- Cr√©ation de la table des livres
 CREATE TABLE livres (
     id INT AUTO_INCREMENT PRIMARY KEY,
     titre VARCHAR(255) NOT NULL,
     auteur VARCHAR(100) NOT NULL,
     annee INT,
     isbn VARCHAR(20) UNIQUE,
     categorie_id INT,
     disponible BOOLEAN DEFAULT TRUE,
     date_ajout TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     FOREIGN KEY (categorie_id) REFERENCES categories(id)
 );

 -- Cr√©ation de la table des emprunts
 CREATE TABLE emprunts (
     id INT AUTO_INCREMENT PRIMARY KEY,
     utilisateur_id INT NOT NULL,
     livre_id INT NOT NULL,
     date_emprunt DATETIME DEFAULT CURRENT_TIMESTAMP,
     date_retour_prevue DATETIME,
     date_retour_effective DATETIME NULL,
     FOREIGN KEY (utilisateur_id) REFERENCES utilisateurs(id),
     FOREIGN KEY (livre_id) REFERENCES livres(id)
 );

 -- Insertion des donn√©es de test pour les cat√©gories
 INSERT INTO categories (nom, description) VALUES
     ('Roman', '≈íuvres de fiction racontant des histoires imaginaires'),
     ('Science-fiction', '≈íuvres bas√©es sur des progr√®s scientifiques et technologiques imaginaires'),
     ('Fantasy', '≈íuvres mettant en sc√®ne des univers imaginaires avec des √©l√©ments magiques'),
     ('Biographie', 'R√©cits de la vie d''une personne √©crite par une autre personne'),
     ('Histoire', 'Livres traitant d''√©v√©nements historiques et de leur analyse'),
     ('D√©veloppement personnel', 'Livres visant l''am√©lioration de soi'),
     ('Informatique', 'Livres sur la programmation et les technologies informatiques'),
     ('Cuisine', 'Livres de recettes et techniques culinaires');

 -- Insertion des donn√©es de test pour les utilisateurs
 INSERT INTO utilisateurs (nom, prenom, email, telephone, date_inscription) VALUES
     ('Dupont', 'Marie', 'marie.dupont@email.com', '0612345678', '2023-01-15 10:30:00'),
     ('Martin', 'Thomas', 'thomas.martin@email.com', '0723456789', '2023-02-20 14:45:00'),
     ('Dubois', 'Sophie', 'sophie.dubois@email.com', '0634567890', '2023-03-10 09:15:00'),
     ('Bernard', 'Lucas', 'lucas.bernard@email.com', '0745678901', '2023-04-05 16:20:00'),
     ('Petit', 'Emma', 'emma.petit@email.com', '0656789012', '2023-05-12 11:00:00'),
     ('Robert', 'Hugo', 'hugo.robert@email.com', '0767890123', '2023-06-18 13:30:00'),
     ('Richard', 'Chlo√©', 'chloe.richard@email.com', '0678901234', '2023-07-23 15:45:00'),
     ('Moreau', 'Nathan', 'nathan.moreau@email.com', '0789012345', '2023-08-30 10:10:00'),
     ('Simon', 'L√©a', 'lea.simon@email.com', '0690123456', '2023-09-14 12:25:00'),
     ('Laurent', 'Gabriel', 'gabriel.laurent@email.com', '0701234567', '2023-10-01 14:40:00');

 -- Insertion des donn√©es de test pour les livres
 INSERT INTO livres (titre, auteur, annee, isbn, categorie_id, disponible) VALUES
     ('Le Petit Prince', 'Antoine de Saint-Exup√©ry', 1943, '978-2070612758', 1, TRUE),
     ('1984', 'George Orwell', 1949, '978-2070368228', 2, TRUE),
     ('Harry Potter √† l''√©cole des sorciers', 'J.K. Rowling', 1997, '978-2070643028', 3, FALSE),
     ('L''Alchimiste', 'Paulo Coelho', 1988, '978-2290004448', 1, TRUE),
     ('Dune', 'Frank Herbert', 1965, '978-2266233415', 2, TRUE),
     ('Le Seigneur des Anneaux', 'J.R.R. Tolkien', 1954, '978-2267011258', 3, FALSE),
     ('Steve Jobs', 'Walter Isaacson', 2011, '978-2709638326', 4, TRUE),
     ('Sapiens : Une br√®ve histoire de l''humanit√©', 'Yuval Noah Harari', 2015, '978-2226257734', 5, TRUE),
     ('L''Art de la Simplicit√©', 'Dominique Loreau', 2005, '978-2501084444', 6, TRUE),
     ('Clean Code', 'Robert C. Martin', 2008, '978-0132350884', 7, FALSE),
     ('Le Guide du Routard - Paris', 'Collectif', 2023, '978-2016281900', 5, TRUE),
     ('Harry Potter et la Chambre des Secrets', 'J.K. Rowling', 1998, '978-2070625178', 3, TRUE),
     ('Les Mis√©rables', 'Victor Hugo', 1862, '978-2253096337', 1, TRUE),
     ('La Cuisine pour les Nuls', 'Bryan Miller', 2006, '978-2754000895', 8, FALSE),
     ('Le Meilleur des Mondes', 'Aldous Huxley', 1932, '978-2266283038', 2, TRUE),
     ('Les Fourmis', 'Bernard Werber', 1991, '978-2253063339', 2, TRUE),
     ('La Ferme des Animaux', 'George Orwell', 1945, '978-2072903073', 1, TRUE),
     ('Le Hobbit', 'J.R.R. Tolkien', 1937, '978-2267023305', 3, TRUE),
     ('Apprendre PHP, MySQL et JavaScript', 'Robin Nixon', 2018, '978-2412034361', 7, FALSE),
     ('Le Grand Livre de la Boulangerie', 'Jean-Marie Lanio', 2017, '978-2841239771', 8, TRUE);

 -- Insertion des donn√©es de test pour les emprunts
 INSERT INTO emprunts (utilisateur_id, livre_id, date_emprunt, date_retour_prevue, date_retour_effective) VALUES
      (1, 3, '2023-11-05 10:15:00', '2023-11-19 10:15:00', NULL),
      (2, 6, '2023-11-06 14:30:00', '2023-11-20 14:30:00', NULL),
      (3, 10, '2023-11-07 11:45:00', '2023-11-21 11:45:00', NULL),
      (4, 14, '2023-11-08 16:00:00', '2023-11-22 16:00:00', NULL),
      (5, 19, '2023-11-09 09:30:00', '2023-11-23 09:30:00', NULL),
      (6, 3, '2023-10-10 13:45:00', '2023-10-24 13:45:00', '2023-10-23 15:30:00'),
      (7, 6, '2023-10-15 15:15:00', '2023-10-29 15:15:00', '2023-10-28 11:20:00'),
      (8, 10, '2023-10-20 10:30:00', '2023-11-03 10:30:00', '2023-11-05 14:10:00'),
      (9, 14, '2023-10-25 12:00:00', '2023-11-08 12:00:00', '2023-11-06 16:45:00'),
      (10, 19, '2023-10-30 14:15:00', '2023-11-13 14:15:00', '2023-11-12 09:30:00'),
      (1, 1, '2023-10-01 09:00:00', '2023-10-15 09:00:00', '2023-10-14 10:20:00'),
      (3, 5, '2023-10-03 11:30:00', '2023-10-17 11:30:00', '2023-10-16 14:15:00'),
      (5, 9, '2023-10-05 14:45:00', '2023-10-19 14:45:00', '2023-10-18 16:30:00'),
      (7, 13, '2023-10-07 16:15:00', '2023-10-21 16:15:00', '2023-10-20 11:45:00'),
      (9, 17, '2023-10-09 10:45:00', '2023-10-23 10:45:00', '2023-10-22 15:00:00');

 */

/**
 * Exercice 1: SQL - Requ√™tes pratiques üìù
 *
 * 1. Trouver l'utilisateur qui a post√© le plus de publications:
 * // √Ä compl√©ter pendant le cours
 *
 * 2. Trouver les publications qui ont re√ßu au moins 2 commentaires:
 * // √Ä compl√©ter pendant le cours
 *
 * 3. Trouver les utilisateurs ayant comment√© au moins 3 fois:
 * // √Ä compl√©ter pendant le cours
 */

/**
 * Impl√©mentez ces requ√™tes SQL en PHP avec PDO ci-dessous:
 */

// 1. Trouver l'utilisateur qui a post√© le plus de publications
function trouverUtilisateurPlusActif($pdo) {
    // √Ä compl√©ter pendant le cours
    $sql = "";

    try {
        $stmt = $pdo->query($sql);
        return $stmt->fetch();
    } catch(PDOException $e) {
        echo "Erreur : " . $e->getMessage();
        return null;
    }
}

// 2. Trouver les publications qui ont re√ßu au moins 2 commentaires
function trouverPublicationsPopulaires($pdo, $min_commentaires = 2) {
    // √Ä compl√©ter pendant le cours
    $sql = "";

    try {
        $stmt = $pdo->prepare($sql);
        $stmt->execute([$min_commentaires]);
        return $stmt->fetchAll();
    } catch(PDOException $e) {
        echo "Erreur : " . $e->getMessage();
        return [];
    }
}

// 3. Trouver les utilisateurs ayant comment√© au moins 3 fois
function trouverUtilisateursActifs($pdo, $min_commentaires = 3) {
    // √Ä compl√©ter pendant le cours
    $sql = "";

    try {
        $stmt = $pdo->prepare($sql);
        $stmt->execute([$min_commentaires]);
        return $stmt->fetchAll();
    } catch(PDOException $e) {
        echo "Erreur : " . $e->getMessage();
        return [];
    }
}

/**
 * ======================================================
 * üìù RESSOURCES RECOMMAND√âES
 * ======================================================
 *
 * - Documentation PHP officielle: https://www.php.net/docs.php
 * - Documentation PDO: https://www.php.net/manual/fr/book.pdo.php
 * - SQL Tutorial (W3Schools): https://www.w3schools.com/sql/
 * - PHP The Right Way: https://phptherightway.com/
 */

// Fermeture de la connexion √† la base de donn√©es (optionnel avec PDO)
// $pdo = null;
?>